// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema


generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite" // You can change this to mysql, sqlite, etc.
  url      = env("DATABASE_URL")
}

/*model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  forms     Form[]
}*/
model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  forms     Form[]
}

model Form {
  id          Int        @id @default(autoincrement())
  title       String
  description String?
  isPublished Boolean    @default(false)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  createdBy   User       @relation(fields: [userId], references: [id])
  userId      Int
  questions   Question[]
  responses   Response[]
}

model Question {
  id           Int      @id @default(autoincrement())
  questionText String
  isRequired   Boolean  @default(false)
  displayOrder Int
  createdAt    DateTime @default(now())
  form         Form     @relation(fields: [formId], references: [id], onDelete: Cascade)
  formId       Int
  answers      Answer[]
}

model Response {
  id            Int      @id @default(autoincrement())
  respondentEmail String?
  submittedAt   DateTime @default(now())
  form          Form     @relation(fields: [formId], references: [id], onDelete: Cascade)
  formId        Int
  answers       Answer[]
}

model Answer {
  id         Int      @id @default(autoincrement())
  textAnswer String   // For short answer responses
  response   Response @relation(fields: [responseId], references: [id], onDelete: Cascade)
  responseId Int
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId Int
}